/// /tmp/gl_core.h
///
/// Autogenerated from gl.xml
///
/// Mike Larson
/// r58Playz
///
/// 6/24/2022
///
/// Generated with this nice tool called makeheaders from fossil-scm.
/// Source file at:
/// https://fossil-scm.org/home/file/src/makeheaders.c

#ifndef gl_core_h
#define gl_core_h

extern GLMContext _ctx;

#define GET_CONTEXT()   _ctx

void glPolygonOffsetClamp(GLfloat factor,GLfloat units,GLfloat clamp);
void glMultiDrawElementsIndirectCount(GLenum mode,GLenum type,const void *indirect,GLintptr drawcount,GLsizei maxdrawcount,GLsizei stride);
void glMultiDrawArraysIndirectCount(GLenum mode,const void *indirect,GLintptr drawcount,GLsizei maxdrawcount,GLsizei stride);
void glSpecializeShader(GLuint shader,const GLchar *pEntryPoint,GLuint numSpecializationConstants,const GLuint *pConstantIndex,const GLuint *pConstantValue);
void glTextureBarrier(void);
void glGetnMinmax(GLenum target,GLboolean reset,GLenum format,GLenum type,GLsizei bufSize,void *values);
void glGetnHistogram(GLenum target,GLboolean reset,GLenum format,GLenum type,GLsizei bufSize,void *values);
void glGetnSeparableFilter(GLenum target,GLenum format,GLenum type,GLsizei rowBufSize,void *row,GLsizei columnBufSize,void *column,void *span);
void glGetnConvolutionFilter(GLenum target,GLenum format,GLenum type,GLsizei bufSize,void *image);
void glGetnColorTable(GLenum target,GLenum format,GLenum type,GLsizei bufSize,void *table);
void glGetnPolygonStipple(GLsizei bufSize,GLubyte *pattern);
void glGetnPixelMapusv(GLenum map,GLsizei bufSize,GLushort *values);
void glGetnPixelMapuiv(GLenum map,GLsizei bufSize,GLuint *values);
void glGetnPixelMapfv(GLenum map,GLsizei bufSize,GLfloat *values);
void glGetnMapiv(GLenum target,GLenum query,GLsizei bufSize,GLint *v);
void glGetnMapfv(GLenum target,GLenum query,GLsizei bufSize,GLfloat *v);
void glGetnMapdv(GLenum target,GLenum query,GLsizei bufSize,GLdouble *v);
void glReadnPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLsizei bufSize,void *data);
void glGetnUniformuiv(GLuint program,GLint location,GLsizei bufSize,GLuint *params);
void glGetnUniformiv(GLuint program,GLint location,GLsizei bufSize,GLint *params);
void glGetnUniformfv(GLuint program,GLint location,GLsizei bufSize,GLfloat *params);
void glGetnUniformdv(GLuint program,GLint location,GLsizei bufSize,GLdouble *params);
void glGetnTexImage(GLenum target,GLint level,GLenum format,GLenum type,GLsizei bufSize,void *pixels);
void glGetnCompressedTexImage(GLenum target,GLint lod,GLsizei bufSize,void *pixels);
GLenum glGetGraphicsResetStatus(void);
void glGetCompressedTextureSubImage(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLsizei bufSize,void *pixels);
void glGetTextureSubImage(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,GLsizei bufSize,void *pixels);
void glMemoryBarrierByRegion(GLbitfield barriers);
void glGetQueryBufferObjectuiv(GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
void glGetQueryBufferObjectui64v(GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
void glGetQueryBufferObjectiv(GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
void glGetQueryBufferObjecti64v(GLuint id,GLuint buffer,GLenum pname,GLintptr offset);
void glCreateQueries(GLenum target,GLsizei n,GLuint *ids);
void glCreateProgramPipelines(GLsizei n,GLuint *pipelines);
void glCreateSamplers(GLsizei n,GLuint *samplers);
void glGetVertexArrayIndexed64iv(GLuint vaobj,GLuint index,GLenum pname,GLint64 *param);
void glGetVertexArrayIndexediv(GLuint vaobj,GLuint index,GLenum pname,GLint *param);
void glGetVertexArrayiv(GLuint vaobj,GLenum pname,GLint *param);
void glVertexArrayBindingDivisor(GLuint vaobj,GLuint bindingindex,GLuint divisor);
void glVertexArrayAttribLFormat(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset);
void glVertexArrayAttribIFormat(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset);
void glVertexArrayAttribFormat(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset);
void glVertexArrayAttribBinding(GLuint vaobj,GLuint attribindex,GLuint bindingindex);
void glVertexArrayVertexBuffers(GLuint vaobj,GLuint first,GLsizei count,const GLuint *buffers,const GLintptr *offsets,const GLsizei *strides);
void glVertexArrayVertexBuffer(GLuint vaobj,GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride);
void glVertexArrayElementBuffer(GLuint vaobj,GLuint buffer);
void glEnableVertexArrayAttrib(GLuint vaobj,GLuint index);
void glDisableVertexArrayAttrib(GLuint vaobj,GLuint index);
void glCreateVertexArrays(GLsizei n,GLuint *arrays);
void glGetTextureParameteriv(GLuint texture,GLenum pname,GLint *params);
void glGetTextureParameterIuiv(GLuint texture,GLenum pname,GLuint *params);
void glGetTextureParameterIiv(GLuint texture,GLenum pname,GLint *params);
void glGetTextureParameterfv(GLuint texture,GLenum pname,GLfloat *params);
void glGetTextureLevelParameteriv(GLuint texture,GLint level,GLenum pname,GLint *params);
void glGetTextureLevelParameterfv(GLuint texture,GLint level,GLenum pname,GLfloat *params);
void glGetCompressedTextureImage(GLuint texture,GLint level,GLsizei bufSize,void *pixels);
void glGetTextureImage(GLuint texture,GLint level,GLenum format,GLenum type,GLsizei bufSize,void *pixels);
void glBindTextureUnit(GLuint unit,GLuint texture);
void glGenerateTextureMipmap(GLuint texture);
void glTextureParameteriv(GLuint texture,GLenum pname,const GLint *param);
void glTextureParameterIuiv(GLuint texture,GLenum pname,const GLuint *params);
void glTextureParameterIiv(GLuint texture,GLenum pname,const GLint *params);
void glTextureParameteri(GLuint texture,GLenum pname,GLint param);
void glTextureParameterfv(GLuint texture,GLenum pname,const GLfloat *param);
void glTextureParameterf(GLuint texture,GLenum pname,GLfloat param);
void glCopyTextureSubImage3D(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height);
void glCopyTextureSubImage2D(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height);
void glCopyTextureSubImage1D(GLuint texture,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width);
void glCompressedTextureSubImage3D(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void *data);
void glCompressedTextureSubImage2D(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void *data);
void glCompressedTextureSubImage1D(GLuint texture,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void *data);
void glTextureSubImage3D(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void *pixels);
void glTextureSubImage2D(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void *pixels);
void glTextureSubImage1D(GLuint texture,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void *pixels);
void glTextureStorage3DMultisample(GLuint texture,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations);
void glTextureStorage2DMultisample(GLuint texture,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations);
void glTextureStorage3D(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth);
void glTextureStorage2D(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height);
void glTextureStorage1D(GLuint texture,GLsizei levels,GLenum internalformat,GLsizei width);
void glTextureBufferRange(GLuint texture,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizeiptr size);
void glTextureBuffer(GLuint texture,GLenum internalformat,GLuint buffer);
void glCreateTextures(GLenum target,GLsizei n,GLuint *textures);
void glGetNamedRenderbufferParameteriv(GLuint renderbuffer,GLenum pname,GLint *params);
void glNamedRenderbufferStorageMultisample(GLuint renderbuffer,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height);
void glNamedRenderbufferStorage(GLuint renderbuffer,GLenum internalformat,GLsizei width,GLsizei height);
void glCreateRenderbuffers(GLsizei n,GLuint *renderbuffers);
void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer,GLenum attachment,GLenum pname,GLint *params);
void glGetNamedFramebufferParameteriv(GLuint framebuffer,GLenum pname,GLint *param);
GLenum glCheckNamedFramebufferStatus(GLuint framebuffer,GLenum target);
void glBlitNamedFramebuffer(GLuint readFramebuffer,GLuint drawFramebuffer,GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter);
void glClearNamedFramebufferfi(GLuint framebuffer,GLenum buffer,GLint drawbuffer,GLfloat depth,GLint stencil);
void glClearNamedFramebufferfv(GLuint framebuffer,GLenum buffer,GLint drawbuffer,const GLfloat *value);
void glClearNamedFramebufferuiv(GLuint framebuffer,GLenum buffer,GLint drawbuffer,const GLuint *value);
void glClearNamedFramebufferiv(GLuint framebuffer,GLenum buffer,GLint drawbuffer,const GLint *value);
void glInvalidateNamedFramebufferSubData(GLuint framebuffer,GLsizei numAttachments,const GLenum *attachments,GLint x,GLint y,GLsizei width,GLsizei height);
void glInvalidateNamedFramebufferData(GLuint framebuffer,GLsizei numAttachments,const GLenum *attachments);
void glNamedFramebufferReadBuffer(GLuint framebuffer,GLenum src);
void glNamedFramebufferDrawBuffers(GLuint framebuffer,GLsizei n,const GLenum *bufs);
void glNamedFramebufferDrawBuffer(GLuint framebuffer,GLenum buf);
void glNamedFramebufferTextureLayer(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level,GLint layer);
void glNamedFramebufferTexture(GLuint framebuffer,GLenum attachment,GLuint texture,GLint level);
void glNamedFramebufferParameteri(GLuint framebuffer,GLenum pname,GLint param);
void glNamedFramebufferRenderbuffer(GLuint framebuffer,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer);
void glCreateFramebuffers(GLsizei n,GLuint *framebuffers);
void glGetNamedBufferSubData(GLuint buffer,GLintptr offset,GLsizeiptr size,void *data);
void glGetNamedBufferPointerv(GLuint buffer,GLenum pname,void **params);
void glGetNamedBufferParameteri64v(GLuint buffer,GLenum pname,GLint64 *params);
void glGetNamedBufferParameteriv(GLuint buffer,GLenum pname,GLint *params);
void glFlushMappedNamedBufferRange(GLuint buffer,GLintptr offset,GLsizeiptr length);
GLboolean glUnmapNamedBuffer(GLuint buffer);
void *glMapNamedBufferRange(GLuint buffer,GLintptr offset,GLsizeiptr length,GLbitfield access);
void *glMapNamedBuffer(GLuint buffer,GLenum access);
void glClearNamedBufferSubData(GLuint buffer,GLenum internalformat,GLintptr offset,GLsizeiptr size,GLenum format,GLenum type,const void *data);
void glClearNamedBufferData(GLuint buffer,GLenum internalformat,GLenum format,GLenum type,const void *data);
void glCopyNamedBufferSubData(GLuint readBuffer,GLuint writeBuffer,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size);
void glNamedBufferSubData(GLuint buffer,GLintptr offset,GLsizeiptr size,const void *data);
void glNamedBufferData(GLuint buffer,GLsizeiptr size,const void *data,GLenum usage);
void glNamedBufferStorage(GLuint buffer,GLsizeiptr size,const void *data,GLbitfield flags);
void glCreateBuffers(GLsizei n,GLuint *buffers);
void glGetTransformFeedbacki64_v(GLuint xfb,GLenum pname,GLuint index,GLint64 *param);
void glGetTransformFeedbacki_v(GLuint xfb,GLenum pname,GLuint index,GLint *param);
void glGetTransformFeedbackiv(GLuint xfb,GLenum pname,GLint *param);
void glTransformFeedbackBufferRange(GLuint xfb,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size);
void glTransformFeedbackBufferBase(GLuint xfb,GLuint index,GLuint buffer);
void glCreateTransformFeedbacks(GLsizei n,GLuint *ids);
void glClipControl(GLenum origin,GLenum depth);
void glBindVertexBuffers(GLuint first,GLsizei count,const GLuint *buffers,const GLintptr *offsets,const GLsizei *strides);
void glBindImageTextures(GLuint first,GLsizei count,const GLuint *textures);
void glBindSamplers(GLuint first,GLsizei count,const GLuint *samplers);
void glBindTextures(GLuint first,GLsizei count,const GLuint *textures);
void glBindBuffersRange(GLenum target,GLuint first,GLsizei count,const GLuint *buffers,const GLintptr *offsets,const GLsizeiptr *sizes);
void glBindBuffersBase(GLenum target,GLuint first,GLsizei count,const GLuint *buffers);
void glClearTexSubImage(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void *data);
void glClearTexImage(GLuint texture,GLint level,GLenum format,GLenum type,const void *data);
void glBufferStorage(GLenum target,GLsizeiptr size,const void *data,GLbitfield flags);
void glGetObjectPtrLabel(const void *ptr,GLsizei bufSize,GLsizei *length,GLchar *label);
void glObjectPtrLabel(const void *ptr,GLsizei length,const GLchar *label);
void glGetObjectLabel(GLenum identifier,GLuint name,GLsizei bufSize,GLsizei *length,GLchar *label);
void glObjectLabel(GLenum identifier,GLuint name,GLsizei length,const GLchar *label);
void glPopDebugGroup(void);
void glPushDebugGroup(GLenum source,GLuint id,GLsizei length,const GLchar *message);
GLuint glGetDebugMessageLog(GLuint count,GLsizei bufSize,GLenum *sources,GLenum *types,GLuint *ids,GLenum *severities,GLsizei *lengths,GLchar *messageLog);
void glDebugMessageCallback(GLDEBUGPROC callback,const void *userParam);
void glDebugMessageInsert(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *buf);
void glDebugMessageControl(GLenum source,GLenum type,GLenum severity,GLsizei count,const GLuint *ids,GLboolean enabled);
void glVertexBindingDivisor(GLuint bindingindex,GLuint divisor);
void glVertexAttribBinding(GLuint attribindex,GLuint bindingindex);
void glVertexAttribLFormat(GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset);
void glVertexAttribIFormat(GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset);
void glVertexAttribFormat(GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset);
void glBindVertexBuffer(GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride);
void glTextureView(GLuint texture,GLenum target,GLuint origtexture,GLenum internalformat,GLuint minlevel,GLuint numlevels,GLuint minlayer,GLuint numlayers);
void glTexStorage3DMultisample(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations);
void glTexStorage2DMultisample(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations);
void glTexBufferRange(GLenum target,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizeiptr size);
void glShaderStorageBlockBinding(GLuint program,GLuint storageBlockIndex,GLuint storageBlockBinding);
GLint glGetProgramResourceLocationIndex(GLuint program,GLenum programInterface,const GLchar *name);
GLint glGetProgramResourceLocation(GLuint program,GLenum programInterface,const GLchar *name);
void glGetProgramResourceiv(GLuint program,GLenum programInterface,GLuint index,GLsizei propCount,const GLenum *props,GLsizei count,GLsizei *length,GLint *params);
void glGetProgramResourceName(GLuint program,GLenum programInterface,GLuint index,GLsizei bufSize,GLsizei *length,GLchar *name);
GLuint glGetProgramResourceIndex(GLuint program,GLenum programInterface,const GLchar *name);
void glGetProgramInterfaceiv(GLuint program,GLenum programInterface,GLenum pname,GLint *params);
void glMultiDrawElementsIndirect(GLenum mode,GLenum type,const void *indirect,GLsizei drawcount,GLsizei stride);
void glMultiDrawArraysIndirect(GLenum mode,const void *indirect,GLsizei drawcount,GLsizei stride);
void glInvalidateSubFramebuffer(GLenum target,GLsizei numAttachments,const GLenum *attachments,GLint x,GLint y,GLsizei width,GLsizei height);
void glInvalidateFramebuffer(GLenum target,GLsizei numAttachments,const GLenum *attachments);
void glInvalidateBufferData(GLuint buffer);
void glInvalidateBufferSubData(GLuint buffer,GLintptr offset,GLsizeiptr length);
void glInvalidateTexImage(GLuint texture,GLint level);
void glInvalidateTexSubImage(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth);
void glGetInternalformati64v(GLenum target,GLenum internalformat,GLenum pname,GLsizei count,GLint64 *params);
void glGetFramebufferParameteriv(GLenum target,GLenum pname,GLint *params);
void glFramebufferParameteri(GLenum target,GLenum pname,GLint param);
void glCopyImageSubData(GLuint srcName,GLenum srcTarget,GLint srcLevel,GLint srcX,GLint srcY,GLint srcZ,GLuint dstName,GLenum dstTarget,GLint dstLevel,GLint dstX,GLint dstY,GLint dstZ,GLsizei srcWidth,GLsizei srcHeight,GLsizei srcDepth);
void glDispatchComputeIndirect(GLintptr indirect);
void glDispatchCompute(GLuint num_groups_x,GLuint num_groups_y,GLuint num_groups_z);
void glClearBufferSubData(GLenum target,GLenum internalformat,GLintptr offset,GLsizeiptr size,GLenum format,GLenum type,const void *data);
void glClearBufferData(GLenum target,GLenum internalformat,GLenum format,GLenum type,const void *data);
void glDrawTransformFeedbackStreamInstanced(GLenum mode,GLuint id,GLuint stream,GLsizei instancecount);
void glDrawTransformFeedbackInstanced(GLenum mode,GLuint id,GLsizei instancecount);
void glTexStorage3D(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth);
void glTexStorage2D(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height);
void glTexStorage1D(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width);
void glMemoryBarrier(GLbitfield barriers);
void glBindImageTexture(GLuint unit,GLuint texture,GLint level,GLboolean layered,GLint layer,GLenum access,GLenum format);
void glGetActiveAtomicCounterBufferiv(GLuint program,GLuint bufferIndex,GLenum pname,GLint *params);
void glGetInternalformativ(GLenum target,GLenum internalformat,GLenum pname,GLsizei count,GLint *params);
void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode,GLsizei count,GLenum type,const void *indices,GLsizei instancecount,GLint basevertex,GLuint baseinstance);
void glDrawElementsInstancedBaseInstance(GLenum mode,GLsizei count,GLenum type,const void *indices,GLsizei instancecount,GLuint baseinstance);
void glDrawArraysInstancedBaseInstance(GLenum mode,GLint first,GLsizei count,GLsizei instancecount,GLuint baseinstance);
void glGetDoublei_v(GLenum target,GLuint index,GLdouble *data);
void glGetFloati_v(GLenum target,GLuint index,GLfloat *data);
void glDepthRangeIndexed(GLuint index,GLdouble n,GLdouble f);
void glDepthRangeArrayv(GLuint first,GLsizei count,const GLdouble *v);
void glScissorIndexedv(GLuint index,const GLint *v);
void glScissorIndexed(GLuint index,GLint left,GLint bottom,GLsizei width,GLsizei height);
void glScissorArrayv(GLuint first,GLsizei count,const GLint *v);
void glViewportIndexedfv(GLuint index,const GLfloat *v);
void glViewportIndexedf(GLuint index,GLfloat x,GLfloat y,GLfloat w,GLfloat h);
void glViewportArrayv(GLuint first,GLsizei count,const GLfloat *v);
void glGetVertexAttribLdv(GLuint index,GLenum pname,GLdouble *params);
void glVertexAttribLPointer(GLuint index,GLint size,GLenum type,GLsizei stride,const void *pointer);
void glVertexAttribL4dv(GLuint index,const GLdouble *v);
void glVertexAttribL3dv(GLuint index,const GLdouble *v);
void glVertexAttribL2dv(GLuint index,const GLdouble *v);
void glVertexAttribL1dv(GLuint index,const GLdouble *v);
void glVertexAttribL4d(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w);
void glVertexAttribL3d(GLuint index,GLdouble x,GLdouble y,GLdouble z);
void glVertexAttribL2d(GLuint index,GLdouble x,GLdouble y);
void glVertexAttribL1d(GLuint index,GLdouble x);
void glGetProgramPipelineInfoLog(GLuint pipeline,GLsizei bufSize,GLsizei *length,GLchar *infoLog);
void glValidateProgramPipeline(GLuint pipeline);
void glProgramUniformMatrix4x3dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix3x4dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix4x2dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix2x4dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix3x2dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix2x3dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix4x3fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix3x4fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix4x2fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix2x4fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix3x2fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix2x3fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix4dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix3dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix2dv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glProgramUniformMatrix4fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix3fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniformMatrix2fv(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glProgramUniform4uiv(GLuint program,GLint location,GLsizei count,const GLuint *value);
void glProgramUniform4ui(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3);
void glProgramUniform4dv(GLuint program,GLint location,GLsizei count,const GLdouble *value);
void glProgramUniform4d(GLuint program,GLint location,GLdouble v0,GLdouble v1,GLdouble v2,GLdouble v3);
void glProgramUniform4fv(GLuint program,GLint location,GLsizei count,const GLfloat *value);
void glProgramUniform4f(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3);
void glProgramUniform4iv(GLuint program,GLint location,GLsizei count,const GLint *value);
void glProgramUniform4i(GLuint program,GLint location,GLint v0,GLint v1,GLint v2,GLint v3);
void glProgramUniform3uiv(GLuint program,GLint location,GLsizei count,const GLuint *value);
void glProgramUniform3ui(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2);
void glProgramUniform3dv(GLuint program,GLint location,GLsizei count,const GLdouble *value);
void glProgramUniform3d(GLuint program,GLint location,GLdouble v0,GLdouble v1,GLdouble v2);
void glProgramUniform3fv(GLuint program,GLint location,GLsizei count,const GLfloat *value);
void glProgramUniform3f(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2);
void glProgramUniform3iv(GLuint program,GLint location,GLsizei count,const GLint *value);
void glProgramUniform3i(GLuint program,GLint location,GLint v0,GLint v1,GLint v2);
void glProgramUniform2uiv(GLuint program,GLint location,GLsizei count,const GLuint *value);
void glProgramUniform2ui(GLuint program,GLint location,GLuint v0,GLuint v1);
void glProgramUniform2dv(GLuint program,GLint location,GLsizei count,const GLdouble *value);
void glProgramUniform2d(GLuint program,GLint location,GLdouble v0,GLdouble v1);
void glProgramUniform2fv(GLuint program,GLint location,GLsizei count,const GLfloat *value);
void glProgramUniform2f(GLuint program,GLint location,GLfloat v0,GLfloat v1);
void glProgramUniform2iv(GLuint program,GLint location,GLsizei count,const GLint *value);
void glProgramUniform2i(GLuint program,GLint location,GLint v0,GLint v1);
void glProgramUniform1uiv(GLuint program,GLint location,GLsizei count,const GLuint *value);
void glProgramUniform1ui(GLuint program,GLint location,GLuint v0);
void glProgramUniform1dv(GLuint program,GLint location,GLsizei count,const GLdouble *value);
void glProgramUniform1d(GLuint program,GLint location,GLdouble v0);
void glProgramUniform1fv(GLuint program,GLint location,GLsizei count,const GLfloat *value);
void glProgramUniform1f(GLuint program,GLint location,GLfloat v0);
void glProgramUniform1iv(GLuint program,GLint location,GLsizei count,const GLint *value);
void glProgramUniform1i(GLuint program,GLint location,GLint v0);
void glGetProgramPipelineiv(GLuint pipeline,GLenum pname,GLint *params);
GLboolean glIsProgramPipeline(GLuint pipeline);
void glGenProgramPipelines(GLsizei n,GLuint *pipelines);
void glDeleteProgramPipelines(GLsizei n,const GLuint *pipelines);
void glBindProgramPipeline(GLuint pipeline);
GLuint glCreateShaderProgramv(GLenum type,GLsizei count,const GLchar *const *strings);
void glActiveShaderProgram(GLuint pipeline,GLuint program);
void glUseProgramStages(GLuint pipeline,GLbitfield stages,GLuint program);
void glProgramParameteri(GLuint program,GLenum pname,GLint value);
void glProgramBinary(GLuint program,GLenum binaryFormat,const void *binary,GLsizei length);
void glGetProgramBinary(GLuint program,GLsizei bufSize,GLsizei *length,GLenum *binaryFormat,void *binary);
void glClearDepthf(GLfloat d);
void glDepthRangef(GLfloat n,GLfloat f);
void glGetShaderPrecisionFormat(GLenum shadertype,GLenum precisiontype,GLint *range,GLint *precision);
void glShaderBinary(GLsizei count,const GLuint *shaders,GLenum binaryFormat,const void *binary,GLsizei length);
void glReleaseShaderCompiler(void);
void glGetQueryIndexediv(GLenum target,GLuint index,GLenum pname,GLint *params);
void glEndQueryIndexed(GLenum target,GLuint index);
void glBeginQueryIndexed(GLenum target,GLuint index,GLuint id);
void glDrawTransformFeedbackStream(GLenum mode,GLuint id,GLuint stream);
void glDrawTransformFeedback(GLenum mode,GLuint id);
void glResumeTransformFeedback(void);
void glPauseTransformFeedback(void);
GLboolean glIsTransformFeedback(GLuint id);
void glGenTransformFeedbacks(GLsizei n,GLuint *ids);
void glDeleteTransformFeedbacks(GLsizei n,const GLuint *ids);
void glBindTransformFeedback(GLenum target,GLuint id);
void glPatchParameterfv(GLenum pname,const GLfloat *values);
void glPatchParameteri(GLenum pname,GLint value);
void glGetProgramStageiv(GLuint program,GLenum shadertype,GLenum pname,GLint *values);
void glGetUniformSubroutineuiv(GLenum shadertype,GLint location,GLuint *params);
void glUniformSubroutinesuiv(GLenum shadertype,GLsizei count,const GLuint *indices);
void glGetActiveSubroutineName(GLuint program,GLenum shadertype,GLuint index,GLsizei bufSize,GLsizei *length,GLchar *name);
void glGetActiveSubroutineUniformName(GLuint program,GLenum shadertype,GLuint index,GLsizei bufSize,GLsizei *length,GLchar *name);
void glGetActiveSubroutineUniformiv(GLuint program,GLenum shadertype,GLuint index,GLenum pname,GLint *values);
GLuint glGetSubroutineIndex(GLuint program,GLenum shadertype,const GLchar *name);
GLint glGetSubroutineUniformLocation(GLuint program,GLenum shadertype,const GLchar *name);
void glGetUniformdv(GLuint program,GLint location,GLdouble *params);
void glUniformMatrix4x3dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix4x2dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix3x4dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix3x2dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix2x4dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix2x3dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix4dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix3dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniformMatrix2dv(GLint location,GLsizei count,GLboolean transpose,const GLdouble *value);
void glUniform4dv(GLint location,GLsizei count,const GLdouble *value);
void glUniform3dv(GLint location,GLsizei count,const GLdouble *value);
void glUniform2dv(GLint location,GLsizei count,const GLdouble *value);
void glUniform1dv(GLint location,GLsizei count,const GLdouble *value);
void glUniform4d(GLint location,GLdouble x,GLdouble y,GLdouble z,GLdouble w);
void glUniform3d(GLint location,GLdouble x,GLdouble y,GLdouble z);
void glUniform2d(GLint location,GLdouble x,GLdouble y);
void glUniform1d(GLint location,GLdouble x);
void glDrawElementsIndirect(GLenum mode,GLenum type,const void *indirect);
void glDrawArraysIndirect(GLenum mode,const void *indirect);
void glBlendFuncSeparatei(GLuint buf,GLenum srcRGB,GLenum dstRGB,GLenum srcAlpha,GLenum dstAlpha);
void glBlendFunci(GLuint buf,GLenum src,GLenum dst);
void glBlendEquationSeparatei(GLuint buf,GLenum modeRGB,GLenum modeAlpha);
void glBlendEquationi(GLuint buf,GLenum mode);
void glMinSampleShading(GLfloat value);
void glSecondaryColorP3uiv(GLenum type,const GLuint *color);
void glSecondaryColorP3ui(GLenum type,GLuint color);
void glColorP4uiv(GLenum type,const GLuint *color);
void glColorP4ui(GLenum type,GLuint color);
void glColorP3uiv(GLenum type,const GLuint *color);
void glColorP3ui(GLenum type,GLuint color);
void glNormalP3uiv(GLenum type,const GLuint *coords);
void glNormalP3ui(GLenum type,GLuint coords);
void glMultiTexCoordP4uiv(GLenum texture,GLenum type,const GLuint *coords);
void glMultiTexCoordP4ui(GLenum texture,GLenum type,GLuint coords);
void glMultiTexCoordP3uiv(GLenum texture,GLenum type,const GLuint *coords);
void glMultiTexCoordP3ui(GLenum texture,GLenum type,GLuint coords);
void glMultiTexCoordP2uiv(GLenum texture,GLenum type,const GLuint *coords);
void glMultiTexCoordP2ui(GLenum texture,GLenum type,GLuint coords);
void glMultiTexCoordP1uiv(GLenum texture,GLenum type,const GLuint *coords);
void glMultiTexCoordP1ui(GLenum texture,GLenum type,GLuint coords);
void glTexCoordP4uiv(GLenum type,const GLuint *coords);
void glTexCoordP4ui(GLenum type,GLuint coords);
void glTexCoordP3uiv(GLenum type,const GLuint *coords);
void glTexCoordP3ui(GLenum type,GLuint coords);
void glTexCoordP2uiv(GLenum type,const GLuint *coords);
void glTexCoordP2ui(GLenum type,GLuint coords);
void glTexCoordP1uiv(GLenum type,const GLuint *coords);
void glTexCoordP1ui(GLenum type,GLuint coords);
void glVertexP4uiv(GLenum type,const GLuint *value);
void glVertexP4ui(GLenum type,GLuint value);
void glVertexP3uiv(GLenum type,const GLuint *value);
void glVertexP3ui(GLenum type,GLuint value);
void glVertexP2uiv(GLenum type,const GLuint *value);
void glVertexP2ui(GLenum type,GLuint value);
void glVertexAttribP4uiv(GLuint index,GLenum type,GLboolean normalized,const GLuint *value);
void glVertexAttribP4ui(GLuint index,GLenum type,GLboolean normalized,GLuint value);
void glVertexAttribP3uiv(GLuint index,GLenum type,GLboolean normalized,const GLuint *value);
void glVertexAttribP3ui(GLuint index,GLenum type,GLboolean normalized,GLuint value);
void glVertexAttribP2uiv(GLuint index,GLenum type,GLboolean normalized,const GLuint *value);
void glVertexAttribP2ui(GLuint index,GLenum type,GLboolean normalized,GLuint value);
void glVertexAttribP1uiv(GLuint index,GLenum type,GLboolean normalized,const GLuint *value);
void glVertexAttribP1ui(GLuint index,GLenum type,GLboolean normalized,GLuint value);
void glVertexAttribDivisor(GLuint index,GLuint divisor);
void glGetQueryObjectui64v(GLuint id,GLenum pname,GLuint64 *params);
void glGetQueryObjecti64v(GLuint id,GLenum pname,GLint64 *params);
void glQueryCounter(GLuint id,GLenum target);
void glGetSamplerParameterIuiv(GLuint sampler,GLenum pname,GLuint *params);
void glGetSamplerParameterfv(GLuint sampler,GLenum pname,GLfloat *params);
void glGetSamplerParameterIiv(GLuint sampler,GLenum pname,GLint *params);
void glGetSamplerParameteriv(GLuint sampler,GLenum pname,GLint *params);
void glSamplerParameterIuiv(GLuint sampler,GLenum pname,const GLuint *param);
void glSamplerParameterIiv(GLuint sampler,GLenum pname,const GLint *param);
void glSamplerParameterfv(GLuint sampler,GLenum pname,const GLfloat *param);
void glSamplerParameterf(GLuint sampler,GLenum pname,GLfloat param);
void glSamplerParameteriv(GLuint sampler,GLenum pname,const GLint *param);
void glSamplerParameteri(GLuint sampler,GLenum pname,GLint param);
void glBindSampler(GLuint unit,GLuint sampler);
GLboolean glIsSampler(GLuint sampler);
void glDeleteSamplers(GLsizei count,const GLuint *samplers);
void glGenSamplers(GLsizei count,GLuint *samplers);
GLint glGetFragDataIndex(GLuint program,const GLchar *name);
void glBindFragDataLocationIndexed(GLuint program,GLuint colorNumber,GLuint index,const GLchar *name);
void glSampleMaski(GLuint maskNumber,GLbitfield mask);
void glGetMultisamplefv(GLenum pname,GLuint index,GLfloat *val);
void glTexImage3DMultisample(GLenum target,GLsizei samples,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations);
void glTexImage2DMultisample(GLenum target,GLsizei samples,GLint internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations);
void glFramebufferTexture(GLenum target,GLenum attachment,GLuint texture,GLint level);
void glGetBufferParameteri64v(GLenum target,GLenum pname,GLint64 *params);
void glGetInteger64i_v(GLenum target,GLuint index,GLint64 *data);
void glGetSynciv(GLsync sync,GLenum pname,GLsizei count,GLsizei *length,GLint *values);
void glGetInteger64v(GLenum pname,GLint64 *data);
void glWaitSync(GLsync sync,GLbitfield flags,GLuint64 timeout);
GLenum glClientWaitSync(GLsync sync,GLbitfield flags,GLuint64 timeout);
void glDeleteSync(GLsync sync);
GLboolean glIsSync(GLsync sync);
GLsync glFenceSync(GLenum condition,GLbitfield flags);
void glProvokingVertex(GLenum mode);
void glMultiDrawElementsBaseVertex(GLenum mode,const GLsizei *count,GLenum type,const void *const *indices,GLsizei drawcount,const GLint *basevertex);
void glDrawElementsInstancedBaseVertex(GLenum mode,GLsizei count,GLenum type,const void *indices,GLsizei instancecount,GLint basevertex);
void glDrawRangeElementsBaseVertex(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void *indices,GLint basevertex);
void glDrawElementsBaseVertex(GLenum mode,GLsizei count,GLenum type,const void *indices,GLint basevertex);
void glUniformBlockBinding(GLuint program,GLuint uniformBlockIndex,GLuint uniformBlockBinding);
void glGetActiveUniformBlockName(GLuint program,GLuint uniformBlockIndex,GLsizei bufSize,GLsizei *length,GLchar *uniformBlockName);
void glGetActiveUniformBlockiv(GLuint program,GLuint uniformBlockIndex,GLenum pname,GLint *params);
GLuint glGetUniformBlockIndex(GLuint program,const GLchar *uniformBlockName);
void glGetActiveUniformName(GLuint program,GLuint uniformIndex,GLsizei bufSize,GLsizei *length,GLchar *uniformName);
void glGetActiveUniformsiv(GLuint program,GLsizei uniformCount,const GLuint *uniformIndices,GLenum pname,GLint *params);
void glGetUniformIndices(GLuint program,GLsizei uniformCount,const GLchar *const *uniformNames,GLuint *uniformIndices);
void glCopyBufferSubData(GLenum readTarget,GLenum writeTarget,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size);
void glPrimitiveRestartIndex(GLuint index);
void glTexBuffer(GLenum target,GLenum internalformat,GLuint buffer);
void glDrawElementsInstanced(GLenum mode,GLsizei count,GLenum type,const void *indices,GLsizei instancecount);
void glDrawArraysInstanced(GLenum mode,GLint first,GLsizei count,GLsizei instancecount);
GLboolean glIsVertexArray(GLuint array);
void glGenVertexArrays(GLsizei n,GLuint *arrays);
void glDeleteVertexArrays(GLsizei n,const GLuint *arrays);
void glBindVertexArray(GLuint array);
void glFlushMappedBufferRange(GLenum target,GLintptr offset,GLsizeiptr length);
void *glMapBufferRange(GLenum target,GLintptr offset,GLsizeiptr length,GLbitfield access);
void glFramebufferTextureLayer(GLenum target,GLenum attachment,GLuint texture,GLint level,GLint layer);
void glRenderbufferStorageMultisample(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height);
void glBlitFramebuffer(GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter);
void glGenerateMipmap(GLenum target);
void glGetFramebufferAttachmentParameteriv(GLenum target,GLenum attachment,GLenum pname,GLint *params);
void glFramebufferRenderbuffer(GLenum target,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer);
void glFramebufferTexture3D(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level,GLint zoffset);
void glFramebufferTexture2D(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level);
void glFramebufferTexture1D(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level);
GLenum glCheckFramebufferStatus(GLenum target);
void glGenFramebuffers(GLsizei n,GLuint *framebuffers);
void glDeleteFramebuffers(GLsizei n,const GLuint *framebuffers);
void glBindFramebuffer(GLenum target,GLuint framebuffer);
GLboolean glIsFramebuffer(GLuint framebuffer);
void glGetRenderbufferParameteriv(GLenum target,GLenum pname,GLint *params);
void glRenderbufferStorage(GLenum target,GLenum internalformat,GLsizei width,GLsizei height);
void glGenRenderbuffers(GLsizei n,GLuint *renderbuffers);
void glDeleteRenderbuffers(GLsizei n,const GLuint *renderbuffers);
void glBindRenderbuffer(GLenum target,GLuint renderbuffer);
GLboolean glIsRenderbuffer(GLuint renderbuffer);
GLubyte const *glGetStringi(GLenum name,GLuint index);
void glClearBufferfi(GLenum buffer,GLint drawbuffer,GLfloat depth,GLint stencil);
void glClearBufferfv(GLenum buffer,GLint drawbuffer,const GLfloat *value);
void glClearBufferuiv(GLenum buffer,GLint drawbuffer,const GLuint *value);
void glClearBufferiv(GLenum buffer,GLint drawbuffer,const GLint *value);
void glGetTexParameterIuiv(GLenum target,GLenum pname,GLuint *params);
void glGetTexParameterIiv(GLenum target,GLenum pname,GLint *params);
void glTexParameterIuiv(GLenum target,GLenum pname,const GLuint *params);
void glTexParameterIiv(GLenum target,GLenum pname,const GLint *params);
void glUniform4uiv(GLint location,GLsizei count,const GLuint *value);
void glUniform3uiv(GLint location,GLsizei count,const GLuint *value);
void glUniform2uiv(GLint location,GLsizei count,const GLuint *value);
void glUniform1uiv(GLint location,GLsizei count,const GLuint *value);
void glUniform4ui(GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3);
void glUniform3ui(GLint location,GLuint v0,GLuint v1,GLuint v2);
void glUniform2ui(GLint location,GLuint v0,GLuint v1);
void glUniform1ui(GLint location,GLuint v0);
GLint glGetFragDataLocation(GLuint program,const GLchar *name);
void glBindFragDataLocation(GLuint program,GLuint color,const GLchar *name);
void glGetUniformuiv(GLuint program,GLint location,GLuint *params);
void glVertexAttribI4usv(GLuint index,const GLushort *v);
void glVertexAttribI4ubv(GLuint index,const GLubyte *v);
void glVertexAttribI4sv(GLuint index,const GLshort *v);
void glVertexAttribI4bv(GLuint index,const GLbyte *v);
void glVertexAttribI4uiv(GLuint index,const GLuint *v);
void glVertexAttribI3uiv(GLuint index,const GLuint *v);
void glVertexAttribI2uiv(GLuint index,const GLuint *v);
void glVertexAttribI1uiv(GLuint index,const GLuint *v);
void glVertexAttribI4iv(GLuint index,const GLint *v);
void glVertexAttribI3iv(GLuint index,const GLint *v);
void glVertexAttribI2iv(GLuint index,const GLint *v);
void glVertexAttribI1iv(GLuint index,const GLint *v);
void glVertexAttribI4ui(GLuint index,GLuint x,GLuint y,GLuint z,GLuint w);
void glVertexAttribI3ui(GLuint index,GLuint x,GLuint y,GLuint z);
void glVertexAttribI2ui(GLuint index,GLuint x,GLuint y);
void glVertexAttribI1ui(GLuint index,GLuint x);
void glVertexAttribI4i(GLuint index,GLint x,GLint y,GLint z,GLint w);
void glVertexAttribI3i(GLuint index,GLint x,GLint y,GLint z);
void glVertexAttribI2i(GLuint index,GLint x,GLint y);
void glVertexAttribI1i(GLuint index,GLint x);
void glGetVertexAttribIuiv(GLuint index,GLenum pname,GLuint *params);
void glGetVertexAttribIiv(GLuint index,GLenum pname,GLint *params);
void glVertexAttribIPointer(GLuint index,GLint size,GLenum type,GLsizei stride,const void *pointer);
void glEndConditionalRender(void);
void glBeginConditionalRender(GLuint id,GLenum mode);
void glClampColor(GLenum target,GLenum clamp);
void glGetTransformFeedbackVarying(GLuint program,GLuint index,GLsizei bufSize,GLsizei *length,GLsizei *size,GLenum *type,GLchar *name);
void glTransformFeedbackVaryings(GLuint program,GLsizei count,const GLchar *const *varyings,GLenum bufferMode);
void glBindBufferBase(GLenum target,GLuint index,GLuint buffer);
void glBindBufferRange(GLenum target,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size);
void glEndTransformFeedback(void);
void glBeginTransformFeedback(GLenum primitiveMode);
GLboolean glIsEnabledi(GLenum target,GLuint index);
void glDisablei(GLenum target,GLuint index);
void glEnablei(GLenum target,GLuint index);
void glGetIntegeri_v(GLenum target,GLuint index,GLint *data);
void glGetBooleani_v(GLenum target,GLuint index,GLboolean *data);
void glColorMaski(GLuint index,GLboolean r,GLboolean g,GLboolean b,GLboolean a);
void glUniformMatrix4x3fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix3x4fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix4x2fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix2x4fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix3x2fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix2x3fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glVertexAttribPointer(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void *pointer);
void glVertexAttrib4usv(GLuint index,const GLushort *v);
void glVertexAttrib4uiv(GLuint index,const GLuint *v);
void glVertexAttrib4ubv(GLuint index,const GLubyte *v);
void glVertexAttrib4sv(GLuint index,const GLshort *v);
void glVertexAttrib4s(GLuint index,GLshort x,GLshort y,GLshort z,GLshort w);
void glVertexAttrib4iv(GLuint index,const GLint *v);
void glVertexAttrib4fv(GLuint index,const GLfloat *v);
void glVertexAttrib4f(GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w);
void glVertexAttrib4dv(GLuint index,const GLdouble *v);
void glVertexAttrib4d(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w);
void glVertexAttrib4bv(GLuint index,const GLbyte *v);
void glVertexAttrib4Nusv(GLuint index,const GLushort *v);
void glVertexAttrib4Nuiv(GLuint index,const GLuint *v);
void glVertexAttrib4Nubv(GLuint index,const GLubyte *v);
void glVertexAttrib4Nub(GLuint index,GLubyte x,GLubyte y,GLubyte z,GLubyte w);
void glVertexAttrib4Nsv(GLuint index,const GLshort *v);
void glVertexAttrib4Niv(GLuint index,const GLint *v);
void glVertexAttrib4Nbv(GLuint index,const GLbyte *v);
void glVertexAttrib3sv(GLuint index,const GLshort *v);
void glVertexAttrib3s(GLuint index,GLshort x,GLshort y,GLshort z);
void glVertexAttrib3fv(GLuint index,const GLfloat *v);
void glVertexAttrib3f(GLuint index,GLfloat x,GLfloat y,GLfloat z);
void glVertexAttrib3dv(GLuint index,const GLdouble *v);
void glVertexAttrib3d(GLuint index,GLdouble x,GLdouble y,GLdouble z);
void glVertexAttrib2sv(GLuint index,const GLshort *v);
void glVertexAttrib2s(GLuint index,GLshort x,GLshort y);
void glVertexAttrib2fv(GLuint index,const GLfloat *v);
void glVertexAttrib2f(GLuint index,GLfloat x,GLfloat y);
void glVertexAttrib2dv(GLuint index,const GLdouble *v);
void glVertexAttrib2d(GLuint index,GLdouble x,GLdouble y);
void glVertexAttrib1sv(GLuint index,const GLshort *v);
void glVertexAttrib1s(GLuint index,GLshort x);
void glVertexAttrib1fv(GLuint index,const GLfloat *v);
void glVertexAttrib1f(GLuint index,GLfloat x);
void glVertexAttrib1dv(GLuint index,const GLdouble *v);
void glVertexAttrib1d(GLuint index,GLdouble x);
void glValidateProgram(GLuint program);
void glUniformMatrix4fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix3fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniformMatrix2fv(GLint location,GLsizei count,GLboolean transpose,const GLfloat *value);
void glUniform4iv(GLint location,GLsizei count,const GLint *value);
void glUniform3iv(GLint location,GLsizei count,const GLint *value);
void glUniform2iv(GLint location,GLsizei count,const GLint *value);
void glUniform1iv(GLint location,GLsizei count,const GLint *value);
void glUniform4fv(GLint location,GLsizei count,const GLfloat *value);
void glUniform3fv(GLint location,GLsizei count,const GLfloat *value);
void glUniform2fv(GLint location,GLsizei count,const GLfloat *value);
void glUniform1fv(GLint location,GLsizei count,const GLfloat *value);
void glUniform4i(GLint location,GLint v0,GLint v1,GLint v2,GLint v3);
void glUniform3i(GLint location,GLint v0,GLint v1,GLint v2);
void glUniform2i(GLint location,GLint v0,GLint v1);
void glUniform1i(GLint location,GLint v0);
void glUniform4f(GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3);
void glUniform3f(GLint location,GLfloat v0,GLfloat v1,GLfloat v2);
void glUniform2f(GLint location,GLfloat v0,GLfloat v1);
void glUniform1f(GLint location,GLfloat v0);
void glUseProgram(GLuint program);
void glShaderSource(GLuint shader,GLsizei count,const GLchar *const *string,const GLint *length);
void glLinkProgram(GLuint program);
GLboolean glIsShader(GLuint shader);
GLboolean glIsProgram(GLuint program);
void glGetVertexAttribPointerv(GLuint index,GLenum pname,void **pointer);
void glGetVertexAttribiv(GLuint index,GLenum pname,GLint *params);
void glGetVertexAttribfv(GLuint index,GLenum pname,GLfloat *params);
void glGetVertexAttribdv(GLuint index,GLenum pname,GLdouble *params);
void glGetUniformiv(GLuint program,GLint location,GLint *params);
void glGetUniformfv(GLuint program,GLint location,GLfloat *params);
GLint glGetUniformLocation(GLuint program,const GLchar *name);
void glGetShaderSource(GLuint shader,GLsizei bufSize,GLsizei *length,GLchar *source);
void glGetShaderInfoLog(GLuint shader,GLsizei bufSize,GLsizei *length,GLchar *infoLog);
void glGetShaderiv(GLuint shader,GLenum pname,GLint *params);
void glGetProgramInfoLog(GLuint program,GLsizei bufSize,GLsizei *length,GLchar *infoLog);
void glGetProgramiv(GLuint program,GLenum pname,GLint *params);
GLint glGetAttribLocation(GLuint program,const GLchar *name);
void glGetAttachedShaders(GLuint program,GLsizei maxCount,GLsizei *count,GLuint *shaders);
void glGetActiveUniform(GLuint program,GLuint index,GLsizei bufSize,GLsizei *length,GLint *size,GLenum *type,GLchar *name);
void glGetActiveAttrib(GLuint program,GLuint index,GLsizei bufSize,GLsizei *length,GLint *size,GLenum *type,GLchar *name);
void glEnableVertexAttribArray(GLuint index);
void glDisableVertexAttribArray(GLuint index);
void glDetachShader(GLuint program,GLuint shader);
void glDeleteShader(GLuint shader);
void glDeleteProgram(GLuint program);
GLuint glCreateShader(GLenum type);
GLuint glCreateProgram(void);
void glCompileShader(GLuint shader);
void glBindAttribLocation(GLuint program,GLuint index,const GLchar *name);
void glAttachShader(GLuint program,GLuint shader);
void glStencilMaskSeparate(GLenum face,GLuint mask);
void glStencilFuncSeparate(GLenum face,GLenum func,GLint ref,GLuint mask);
void glStencilOpSeparate(GLenum face,GLenum sfail,GLenum dpfail,GLenum dppass);
void glDrawBuffers(GLsizei n,const GLenum *bufs);
void glBlendEquationSeparate(GLenum modeRGB,GLenum modeAlpha);
void glGetBufferPointerv(GLenum target,GLenum pname,void **params);
void glGetBufferParameteriv(GLenum target,GLenum pname,GLint *params);
GLboolean glUnmapBuffer(GLenum target);
void *glMapBuffer(GLenum target,GLenum access);
void glGetBufferSubData(GLenum target,GLintptr offset,GLsizeiptr size,void *data);
void glBufferSubData(GLenum target,GLintptr offset,GLsizeiptr size,const void *data);
void glBufferData(GLenum target,GLsizeiptr size,const void *data,GLenum usage);
GLboolean glIsBuffer(GLuint buffer);
void glGenBuffers(GLsizei n,GLuint *buffers);
void glDeleteBuffers(GLsizei n,const GLuint *buffers);
void glBindBuffer(GLenum target,GLuint buffer);
void glGetQueryObjectuiv(GLuint id,GLenum pname,GLuint *params);
void glGetQueryObjectiv(GLuint id,GLenum pname,GLint *params);
void glGetQueryiv(GLenum target,GLenum pname,GLint *params);
void glEndQuery(GLenum target);
void glBeginQuery(GLenum target,GLuint id);
GLboolean glIsQuery(GLuint id);
void glDeleteQueries(GLsizei n,const GLuint *ids);
void glGenQueries(GLsizei n,GLuint *ids);
void glBlendEquation(GLenum mode);
void glBlendColor(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha);
void glWindowPos3sv(const GLshort *v);
void glWindowPos3s(GLshort x,GLshort y,GLshort z);
void glWindowPos3iv(const GLint *v);
void glWindowPos3i(GLint x,GLint y,GLint z);
void glWindowPos3fv(const GLfloat *v);
void glWindowPos3f(GLfloat x,GLfloat y,GLfloat z);
void glWindowPos3dv(const GLdouble *v);
void glWindowPos3d(GLdouble x,GLdouble y,GLdouble z);
void glWindowPos2sv(const GLshort *v);
void glWindowPos2s(GLshort x,GLshort y);
void glWindowPos2iv(const GLint *v);
void glWindowPos2i(GLint x,GLint y);
void glWindowPos2fv(const GLfloat *v);
void glWindowPos2f(GLfloat x,GLfloat y);
void glWindowPos2dv(const GLdouble *v);
void glWindowPos2d(GLdouble x,GLdouble y);
void glSecondaryColorPointer(GLint size,GLenum type,GLsizei stride,const void *pointer);
void glSecondaryColor3usv(const GLushort *v);
void glSecondaryColor3us(GLushort red,GLushort green,GLushort blue);
void glSecondaryColor3uiv(const GLuint *v);
void glSecondaryColor3ui(GLuint red,GLuint green,GLuint blue);
void glSecondaryColor3ubv(const GLubyte *v);
void glSecondaryColor3ub(GLubyte red,GLubyte green,GLubyte blue);
void glSecondaryColor3sv(const GLshort *v);
void glSecondaryColor3s(GLshort red,GLshort green,GLshort blue);
void glSecondaryColor3iv(const GLint *v);
void glSecondaryColor3i(GLint red,GLint green,GLint blue);
void glSecondaryColor3fv(const GLfloat *v);
void glSecondaryColor3f(GLfloat red,GLfloat green,GLfloat blue);
void glSecondaryColor3dv(const GLdouble *v);
void glSecondaryColor3d(GLdouble red,GLdouble green,GLdouble blue);
void glSecondaryColor3bv(const GLbyte *v);
void glSecondaryColor3b(GLbyte red,GLbyte green,GLbyte blue);
void glFogCoordPointer(GLenum type,GLsizei stride,const void *pointer);
void glFogCoorddv(const GLdouble *coord);
void glFogCoordd(GLdouble coord);
void glFogCoordfv(const GLfloat *coord);
void glFogCoordf(GLfloat coord);
void glPointParameteriv(GLenum pname,const GLint *params);
void glPointParameteri(GLenum pname,GLint param);
void glPointParameterfv(GLenum pname,const GLfloat *params);
void glPointParameterf(GLenum pname,GLfloat param);
void glMultiDrawElements(GLenum mode,const GLsizei *count,GLenum type,const void *const *indices,GLsizei drawcount);
void glMultiDrawArrays(GLenum mode,const GLint *first,const GLsizei *count,GLsizei drawcount);
void glBlendFuncSeparate(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha);
void glMultTransposeMatrixd(const GLdouble *m);
void glMultTransposeMatrixf(const GLfloat *m);
void glLoadTransposeMatrixd(const GLdouble *m);
void glLoadTransposeMatrixf(const GLfloat *m);
void glMultiTexCoord4sv(GLenum target,const GLshort *v);
void glMultiTexCoord4s(GLenum target,GLshort s,GLshort t,GLshort r,GLshort q);
void glMultiTexCoord4iv(GLenum target,const GLint *v);
void glMultiTexCoord4i(GLenum target,GLint s,GLint t,GLint r,GLint q);
void glMultiTexCoord4fv(GLenum target,const GLfloat *v);
void glMultiTexCoord4f(GLenum target,GLfloat s,GLfloat t,GLfloat r,GLfloat q);
void glMultiTexCoord4dv(GLenum target,const GLdouble *v);
void glMultiTexCoord4d(GLenum target,GLdouble s,GLdouble t,GLdouble r,GLdouble q);
void glMultiTexCoord3sv(GLenum target,const GLshort *v);
void glMultiTexCoord3s(GLenum target,GLshort s,GLshort t,GLshort r);
void glMultiTexCoord3iv(GLenum target,const GLint *v);
void glMultiTexCoord3i(GLenum target,GLint s,GLint t,GLint r);
void glMultiTexCoord3fv(GLenum target,const GLfloat *v);
void glMultiTexCoord3f(GLenum target,GLfloat s,GLfloat t,GLfloat r);
void glMultiTexCoord3dv(GLenum target,const GLdouble *v);
void glMultiTexCoord3d(GLenum target,GLdouble s,GLdouble t,GLdouble r);
void glMultiTexCoord2sv(GLenum target,const GLshort *v);
void glMultiTexCoord2s(GLenum target,GLshort s,GLshort t);
void glMultiTexCoord2iv(GLenum target,const GLint *v);
void glMultiTexCoord2i(GLenum target,GLint s,GLint t);
void glMultiTexCoord2fv(GLenum target,const GLfloat *v);
void glMultiTexCoord2f(GLenum target,GLfloat s,GLfloat t);
void glMultiTexCoord2dv(GLenum target,const GLdouble *v);
void glMultiTexCoord2d(GLenum target,GLdouble s,GLdouble t);
void glMultiTexCoord1sv(GLenum target,const GLshort *v);
void glMultiTexCoord1s(GLenum target,GLshort s);
void glMultiTexCoord1iv(GLenum target,const GLint *v);
void glMultiTexCoord1i(GLenum target,GLint s);
void glMultiTexCoord1fv(GLenum target,const GLfloat *v);
void glMultiTexCoord1f(GLenum target,GLfloat s);
void glMultiTexCoord1dv(GLenum target,const GLdouble *v);
void glMultiTexCoord1d(GLenum target,GLdouble s);
void glClientActiveTexture(GLenum texture);
void glGetCompressedTexImage(GLenum target,GLint level,void *img);
void glCompressedTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const void *data);
void glCompressedTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const void *data);
void glCompressedTexSubImage3D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const void *data);
void glCompressedTexImage1D(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const void *data);
void glCompressedTexImage2D(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const void *data);
void glCompressedTexImage3D(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const void *data);
void glSampleCoverage(GLfloat value,GLboolean invert);
void glActiveTexture(GLenum texture);
void glCopyTexSubImage3D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height);
void glTexSubImage3D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const void *pixels);
void glTexImage3D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const void *pixels);
void glDrawRangeElements(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const void *indices);
void glPushClientAttrib(GLbitfield mask);
void glPopClientAttrib(void);
void glIndexubv(const GLubyte *c);
void glIndexub(GLubyte c);
void glPrioritizeTextures(GLsizei n,const GLuint *textures,const GLfloat *priorities);
GLboolean glAreTexturesResident(GLsizei n,const GLuint *textures,GLboolean *residences);
void glVertexPointer(GLint size,GLenum type,GLsizei stride,const void *pointer);
void glTexCoordPointer(GLint size,GLenum type,GLsizei stride,const void *pointer);
void glNormalPointer(GLenum type,GLsizei stride,const void *pointer);
void glInterleavedArrays(GLenum format,GLsizei stride,const void *pointer);
void glIndexPointer(GLenum type,GLsizei stride,const void *pointer);
void glEnableClientState(GLenum array);
void glEdgeFlagPointer(GLsizei stride,const void *pointer);
void glDisableClientState(GLenum array);
void glColorPointer(GLint size,GLenum type,GLsizei stride,const void *pointer);
void glArrayElement(GLint i);
GLboolean glIsTexture(GLuint texture);
void glGenTextures(GLsizei n,GLuint *textures);
void glDeleteTextures(GLsizei n,const GLuint *textures);
void glBindTexture(GLenum target,GLuint texture);
void glTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const void *pixels);
void glTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const void *pixels);
void glCopyTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height);
void glCopyTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width);
void glCopyTexImage2D(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border);
void glCopyTexImage1D(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border);
void glPolygonOffset(GLfloat factor,GLfloat units);
void glGetPointerv(GLenum pname,void **params);
void glDrawElements(GLenum mode,GLsizei count,GLenum type,const void *indices);
void glDrawArrays(GLenum mode,GLint first,GLsizei count);
void glTranslatef(GLfloat x,GLfloat y,GLfloat z);
void glTranslated(GLdouble x,GLdouble y,GLdouble z);
void glScalef(GLfloat x,GLfloat y,GLfloat z);
void glScaled(GLdouble x,GLdouble y,GLdouble z);
void glRotatef(GLfloat angle,GLfloat x,GLfloat y,GLfloat z);
void glRotated(GLdouble angle,GLdouble x,GLdouble y,GLdouble z);
void glPushMatrix(void);
void glPopMatrix(void);
void glOrtho(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar);
void glMultMatrixd(const GLdouble *m);
void glMultMatrixf(const GLfloat *m);
void glMatrixMode(GLenum mode);
void glLoadMatrixd(const GLdouble *m);
void glLoadMatrixf(const GLfloat *m);
void glLoadIdentity(void);
void glFrustum(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar);
GLboolean glIsList(GLuint list);
void glGetTexGeniv(GLenum coord,GLenum pname,GLint *params);
void glGetTexGenfv(GLenum coord,GLenum pname,GLfloat *params);
void glGetTexGendv(GLenum coord,GLenum pname,GLdouble *params);
void glGetTexEnviv(GLenum target,GLenum pname,GLint *params);
void glGetTexEnvfv(GLenum target,GLenum pname,GLfloat *params);
void glGetPolygonStipple(GLubyte *mask);
void glGetPixelMapusv(GLenum map,GLushort *values);
void glGetPixelMapuiv(GLenum map,GLuint *values);
void glGetPixelMapfv(GLenum map,GLfloat *values);
void glGetMaterialiv(GLenum face,GLenum pname,GLint *params);
void glGetMaterialfv(GLenum face,GLenum pname,GLfloat *params);
void glGetMapiv(GLenum target,GLenum query,GLint *v);
void glGetMapfv(GLenum target,GLenum query,GLfloat *v);
void glGetMapdv(GLenum target,GLenum query,GLdouble *v);
void glGetLightiv(GLenum light,GLenum pname,GLint *params);
void glGetLightfv(GLenum light,GLenum pname,GLfloat *params);
void glGetClipPlane(GLenum plane,GLdouble *equation);
void glDrawPixels(GLsizei width,GLsizei height,GLenum format,GLenum type,const void *pixels);
void glCopyPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum type);
void glPixelMapusv(GLenum map,GLsizei mapsize,const GLushort *values);
void glPixelMapuiv(GLenum map,GLsizei mapsize,const GLuint *values);
void glPixelMapfv(GLenum map,GLsizei mapsize,const GLfloat *values);
void glPixelTransferi(GLenum pname,GLint param);
void glPixelTransferf(GLenum pname,GLfloat param);
void glPixelZoom(GLfloat xfactor,GLfloat yfactor);
void glAlphaFunc(GLenum func,GLfloat ref);
void glEvalPoint2(GLint i,GLint j);
void glEvalMesh2(GLenum mode,GLint i1,GLint i2,GLint j1,GLint j2);
void glEvalPoint1(GLint i);
void glEvalMesh1(GLenum mode,GLint i1,GLint i2);
void glEvalCoord2fv(const GLfloat *u);
void glEvalCoord2f(GLfloat u,GLfloat v);
void glEvalCoord2dv(const GLdouble *u);
void glEvalCoord2d(GLdouble u,GLdouble v);
void glEvalCoord1fv(const GLfloat *u);
void glEvalCoord1f(GLfloat u);
void glEvalCoord1dv(const GLdouble *u);
void glEvalCoord1d(GLdouble u);
void glMapGrid2f(GLint un,GLfloat u1,GLfloat u2,GLint vn,GLfloat v1,GLfloat v2);
void glMapGrid2d(GLint un,GLdouble u1,GLdouble u2,GLint vn,GLdouble v1,GLdouble v2);
void glMapGrid1f(GLint un,GLfloat u1,GLfloat u2);
void glMapGrid1d(GLint un,GLdouble u1,GLdouble u2);
void glMap2f(GLenum target,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,const GLfloat *points);
void glMap2d(GLenum target,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,const GLdouble *points);
void glMap1f(GLenum target,GLfloat u1,GLfloat u2,GLint stride,GLint order,const GLfloat *points);
void glMap1d(GLenum target,GLdouble u1,GLdouble u2,GLint stride,GLint order,const GLdouble *points);
void glPushAttrib(GLbitfield mask);
void glPopAttrib(void);
void glAccum(GLenum op,GLfloat value);
void glIndexMask(GLuint mask);
void glClearIndex(GLfloat c);
void glClearAccum(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha);
void glPushName(GLuint name);
void glPopName(void);
void glPassThrough(GLfloat token);
void glLoadName(GLuint name);
void glInitNames(void);
GLint glRenderMode(GLenum mode);
void glSelectBuffer(GLsizei size,GLuint *buffer);
void glFeedbackBuffer(GLsizei size,GLenum type,GLfloat *buffer);
void glTexGeniv(GLenum coord,GLenum pname,const GLint *params);
void glTexGeni(GLenum coord,GLenum pname,GLint param);
void glTexGenfv(GLenum coord,GLenum pname,const GLfloat *params);
void glTexGenf(GLenum coord,GLenum pname,GLfloat param);
void glTexGendv(GLenum coord,GLenum pname,const GLdouble *params);
void glTexGend(GLenum coord,GLenum pname,GLdouble param);
void glTexEnviv(GLenum target,GLenum pname,const GLint *params);
void glTexEnvi(GLenum target,GLenum pname,GLint param);
void glTexEnvfv(GLenum target,GLenum pname,const GLfloat *params);
void glTexEnvf(GLenum target,GLenum pname,GLfloat param);
void glShadeModel(GLenum mode);
void glPolygonStipple(const GLubyte *mask);
void glMaterialiv(GLenum face,GLenum pname,const GLint *params);
void glMateriali(GLenum face,GLenum pname,GLint param);
void glMaterialfv(GLenum face,GLenum pname,const GLfloat *params);
void glMaterialf(GLenum face,GLenum pname,GLfloat param);
void glLineStipple(GLint factor,GLushort pattern);
void glLightModeliv(GLenum pname,const GLint *params);
void glLightModeli(GLenum pname,GLint param);
void glLightModelfv(GLenum pname,const GLfloat *params);
void glLightModelf(GLenum pname,GLfloat param);
void glLightiv(GLenum light,GLenum pname,const GLint *params);
void glLighti(GLenum light,GLenum pname,GLint param);
void glLightfv(GLenum light,GLenum pname,const GLfloat *params);
void glLightf(GLenum light,GLenum pname,GLfloat param);
void glFogiv(GLenum pname,const GLint *params);
void glFogi(GLenum pname,GLint param);
void glFogfv(GLenum pname,const GLfloat *params);
void glFogf(GLenum pname,GLfloat param);
void glColorMaterial(GLenum face,GLenum mode);
void glClipPlane(GLenum plane,const GLdouble *equation);
void glVertex4sv(const GLshort *v);
void glVertex4s(GLshort x,GLshort y,GLshort z,GLshort w);
void glVertex4iv(const GLint *v);
void glVertex4i(GLint x,GLint y,GLint z,GLint w);
void glVertex4fv(const GLfloat *v);
void glVertex4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w);
void glVertex4dv(const GLdouble *v);
void glVertex4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w);
void glVertex3sv(const GLshort *v);
void glVertex3s(GLshort x,GLshort y,GLshort z);
void glVertex3iv(const GLint *v);
void glVertex3i(GLint x,GLint y,GLint z);
void glVertex3fv(const GLfloat *v);
void glVertex3f(GLfloat x,GLfloat y,GLfloat z);
void glVertex3dv(const GLdouble *v);
void glVertex3d(GLdouble x,GLdouble y,GLdouble z);
void glVertex2sv(const GLshort *v);
void glVertex2s(GLshort x,GLshort y);
void glVertex2iv(const GLint *v);
void glVertex2i(GLint x,GLint y);
void glVertex2fv(const GLfloat *v);
void glVertex2f(GLfloat x,GLfloat y);
void glVertex2dv(const GLdouble *v);
void glVertex2d(GLdouble x,GLdouble y);
void glTexCoord4sv(const GLshort *v);
void glTexCoord4s(GLshort s,GLshort t,GLshort r,GLshort q);
void glTexCoord4iv(const GLint *v);
void glTexCoord4i(GLint s,GLint t,GLint r,GLint q);
void glTexCoord4fv(const GLfloat *v);
void glTexCoord4f(GLfloat s,GLfloat t,GLfloat r,GLfloat q);
void glTexCoord4dv(const GLdouble *v);
void glTexCoord4d(GLdouble s,GLdouble t,GLdouble r,GLdouble q);
void glTexCoord3sv(const GLshort *v);
void glTexCoord3s(GLshort s,GLshort t,GLshort r);
void glTexCoord3iv(const GLint *v);
void glTexCoord3i(GLint s,GLint t,GLint r);
void glTexCoord3fv(const GLfloat *v);
void glTexCoord3f(GLfloat s,GLfloat t,GLfloat r);
void glTexCoord3dv(const GLdouble *v);
void glTexCoord3d(GLdouble s,GLdouble t,GLdouble r);
void glTexCoord2sv(const GLshort *v);
void glTexCoord2s(GLshort s,GLshort t);
void glTexCoord2iv(const GLint *v);
void glTexCoord2i(GLint s,GLint t);
void glTexCoord2fv(const GLfloat *v);
void glTexCoord2f(GLfloat s,GLfloat t);
void glTexCoord2dv(const GLdouble *v);
void glTexCoord2d(GLdouble s,GLdouble t);
void glTexCoord1sv(const GLshort *v);
void glTexCoord1s(GLshort s);
void glTexCoord1iv(const GLint *v);
void glTexCoord1i(GLint s);
void glTexCoord1fv(const GLfloat *v);
void glTexCoord1f(GLfloat s);
void glTexCoord1dv(const GLdouble *v);
void glTexCoord1d(GLdouble s);
void glRectsv(const GLshort *v1,const GLshort *v2);
void glRects(GLshort x1,GLshort y1,GLshort x2,GLshort y2);
void glRectiv(const GLint *v1,const GLint *v2);
void glRecti(GLint x1,GLint y1,GLint x2,GLint y2);
void glRectfv(const GLfloat *v1,const GLfloat *v2);
void glRectf(GLfloat x1,GLfloat y1,GLfloat x2,GLfloat y2);
void glRectdv(const GLdouble *v1,const GLdouble *v2);
void glRectd(GLdouble x1,GLdouble y1,GLdouble x2,GLdouble y2);
void glRasterPos4sv(const GLshort *v);
void glRasterPos4s(GLshort x,GLshort y,GLshort z,GLshort w);
void glRasterPos4iv(const GLint *v);
void glRasterPos4i(GLint x,GLint y,GLint z,GLint w);
void glRasterPos4fv(const GLfloat *v);
void glRasterPos4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w);
void glRasterPos4dv(const GLdouble *v);
void glRasterPos4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w);
void glRasterPos3sv(const GLshort *v);
void glRasterPos3s(GLshort x,GLshort y,GLshort z);
void glRasterPos3iv(const GLint *v);
void glRasterPos3i(GLint x,GLint y,GLint z);
void glRasterPos3fv(const GLfloat *v);
void glRasterPos3f(GLfloat x,GLfloat y,GLfloat z);
void glRasterPos3dv(const GLdouble *v);
void glRasterPos3d(GLdouble x,GLdouble y,GLdouble z);
void glRasterPos2sv(const GLshort *v);
void glRasterPos2s(GLshort x,GLshort y);
void glRasterPos2iv(const GLint *v);
void glRasterPos2i(GLint x,GLint y);
void glRasterPos2fv(const GLfloat *v);
void glRasterPos2f(GLfloat x,GLfloat y);
void glRasterPos2dv(const GLdouble *v);
void glRasterPos2d(GLdouble x,GLdouble y);
void glNormal3sv(const GLshort *v);
void glNormal3s(GLshort nx,GLshort ny,GLshort nz);
void glNormal3iv(const GLint *v);
void glNormal3i(GLint nx,GLint ny,GLint nz);
void glNormal3fv(const GLfloat *v);
void glNormal3f(GLfloat nx,GLfloat ny,GLfloat nz);
void glNormal3dv(const GLdouble *v);
void glNormal3d(GLdouble nx,GLdouble ny,GLdouble nz);
void glNormal3bv(const GLbyte *v);
void glNormal3b(GLbyte nx,GLbyte ny,GLbyte nz);
void glIndexsv(const GLshort *c);
void glIndexs(GLshort c);
void glIndexiv(const GLint *c);
void glIndexi(GLint c);
void glIndexfv(const GLfloat *c);
void glIndexf(GLfloat c);
void glIndexdv(const GLdouble *c);
void glIndexd(GLdouble c);
void glEnd(void);
void glEdgeFlagv(const GLboolean *flag);
void glEdgeFlag(GLboolean flag);
void glColor4usv(const GLushort *v);
void glColor4us(GLushort red,GLushort green,GLushort blue,GLushort alpha);
void glColor4uiv(const GLuint *v);
void glColor4ui(GLuint red,GLuint green,GLuint blue,GLuint alpha);
void glColor4ubv(const GLubyte *v);
void glColor4ub(GLubyte red,GLubyte green,GLubyte blue,GLubyte alpha);
void glColor4sv(const GLshort *v);
void glColor4s(GLshort red,GLshort green,GLshort blue,GLshort alpha);
void glColor4iv(const GLint *v);
void glColor4i(GLint red,GLint green,GLint blue,GLint alpha);
void glColor4fv(const GLfloat *v);
void glColor4f(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha);
void glColor4dv(const GLdouble *v);
void glColor4d(GLdouble red,GLdouble green,GLdouble blue,GLdouble alpha);
void glColor4bv(const GLbyte *v);
void glColor4b(GLbyte red,GLbyte green,GLbyte blue,GLbyte alpha);
void glColor3usv(const GLushort *v);
void glColor3us(GLushort red,GLushort green,GLushort blue);
void glColor3uiv(const GLuint *v);
void glColor3ui(GLuint red,GLuint green,GLuint blue);
void glColor3ubv(const GLubyte *v);
void glColor3ub(GLubyte red,GLubyte green,GLubyte blue);
void glColor3sv(const GLshort *v);
void glColor3s(GLshort red,GLshort green,GLshort blue);
void glColor3iv(const GLint *v);
void glColor3i(GLint red,GLint green,GLint blue);
void glColor3fv(const GLfloat *v);
void glColor3f(GLfloat red,GLfloat green,GLfloat blue);
void glColor3dv(const GLdouble *v);
void glColor3d(GLdouble red,GLdouble green,GLdouble blue);
void glColor3bv(const GLbyte *v);
void glColor3b(GLbyte red,GLbyte green,GLbyte blue);
void glBitmap(GLsizei width,GLsizei height,GLfloat xorig,GLfloat yorig,GLfloat xmove,GLfloat ymove,const GLubyte *bitmap);
void glBegin(GLenum mode);
void glListBase(GLuint base);
GLuint glGenLists(GLsizei range);
void glDeleteLists(GLuint list,GLsizei range);
void glCallLists(GLsizei n,GLenum type,const void *lists);
void glCallList(GLuint list);
void glEndList(void);
void glNewList(GLuint list,GLenum mode);
void glViewport(GLint x,GLint y,GLsizei width,GLsizei height);
void glDepthRange(GLdouble n,GLdouble f);
GLboolean glIsEnabled(GLenum cap);
void glGetTexLevelParameteriv(GLenum target,GLint level,GLenum pname,GLint *params);
void glGetTexLevelParameterfv(GLenum target,GLint level,GLenum pname,GLfloat *params);
void glGetTexParameteriv(GLenum target,GLenum pname,GLint *params);
void glGetTexParameterfv(GLenum target,GLenum pname,GLfloat *params);
void glGetTexImage(GLenum target,GLint level,GLenum format,GLenum type,void *pixels);
GLubyte const *glGetString(GLenum name);
void glGetIntegerv(GLenum pname,GLint *data);
void glGetFloatv(GLenum pname,GLfloat *data);
GLenum glGetError(void);
void glGetDoublev(GLenum pname,GLdouble *data);
void glGetBooleanv(GLenum pname,GLboolean *data);
void glReadPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void *pixels);
void glReadBuffer(GLenum src);
void glPixelStorei(GLenum pname,GLint param);
void glPixelStoref(GLenum pname,GLfloat param);
void glDepthFunc(GLenum func);
void glStencilOp(GLenum fail,GLenum zfail,GLenum zpass);
void glStencilFunc(GLenum func,GLint ref,GLuint mask);
void glLogicOp(GLenum opcode);
void glBlendFunc(GLenum sfactor,GLenum dfactor);
void glFlush(void);
void glFinish(void);
void glEnable(GLenum cap);
void glDisable(GLenum cap);
void glDepthMask(GLboolean flag);
void glColorMask(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha);
void glStencilMask(GLuint mask);
void glClearDepth(GLdouble depth);
void glClearStencil(GLint s);
void glClearColor(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha);
void glClear(GLbitfield mask);
void glDrawBuffer(GLenum buf);
void glTexImage2D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void *pixels);
void glTexImage1D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const void *pixels);
void glTexParameteriv(GLenum target,GLenum pname,const GLint *params);
void glTexParameteri(GLenum target,GLenum pname,GLint param);
void glTexParameterfv(GLenum target,GLenum pname,const GLfloat *params);
void glTexParameterf(GLenum target,GLenum pname,GLfloat param);
void glScissor(GLint x,GLint y,GLsizei width,GLsizei height);
void glPolygonMode(GLenum face,GLenum mode);
void glPointSize(GLfloat size);
void glLineWidth(GLfloat width);
void glHint(GLenum target,GLenum mode);
void glFrontFace(GLenum mode);
void glCullFace(GLenum mode);

#endif /* gl_core_h */
